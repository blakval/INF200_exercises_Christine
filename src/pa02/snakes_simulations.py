# -*- coding: utf-8 -*-
import random

__author__ = 'Christine Brinchmann', 'Marie Kolvik Val√∏y'
__email__ = 'christibr@nmbu.no', 'mvaloy@nmbu.no'


class Board:
    """
    Creates a standard board for the snakes and ladders game if not specified
    """

    def __init__(self,
                 ladders=((1, 40), (8, 10), (36, 52), (43, 62), (49, 79),
                          (65, 82), (68, 85)),
                 chutes=((24, 5), (33, 3), (42, 30), (56, 37), (64, 27),
                         (74, 12), (87, 70)),
                 goal=90):
        self.ladders = ladders
        self.chutes = chutes
        self.goal = goal

    def goal_reached(self, position):
        """ Return True if the goal is reached"""
        if self.goal == position:
            return True
        else:
            return False

    def position_adjustment(self, position):
        """

        Parameters
        ----------
        position:
            the position of the player

        Returns
        -------
        0:
            if player not at the start of a snake or ladder
        num_step:
            number of position the player must move forward or backward due to
            a ladder or a snake

        """
        for inner_tuple1, inner_tuple2 in zip(self.ladders, self.chutes):
            if position == inner_tuple1[0]:
                return inner_tuple1[1] - inner_tuple1[0]
            elif position == inner_tuple2[0]:
                return inner_tuple2[1] - inner_tuple2[0]
        return 0


class Player:
    def __init__(self, board=Board()):
        self.board = board
        self.position = 0

    def move(self):
        """Moved the player by implementing a dice cast, the following move
        and, if necessary, a move up a ladder or down a snake."""
        throw = random.randint(1, 6)
        self.position += throw
        self.position += self.board.position_adjustment(self.position)


class ResilientPlayer(Player):
    """Subclass of Player, takes extra steps for the next move, but only after
    the player has gone down a snake."""
    def __init__(self, board=Board(), extra_steps=1):
        super().__init__(board)
        self.extra_steps = extra_steps

    def move(self):
        """If the player is at the bottom of a snake, it takes a given
        number of extra steps."""
        for inner_tuple in self.board.chutes:
            if self.position == inner_tuple[1]:
                self.position += self.extra_steps
        super().move()


class LazyPlayer(Player):
    """Subclass of Player, takes a step less for the next move, but only
    after going up a ladder"""
    def __init__(self, board=Board(), dropped_steps=1):
        super().__init__(board)
        self.dropped_steps = dropped_steps

    def move(self):
        """If the player is at the top of a ladder, it takes a given
        number of steps less."""
        for inner_tuple in self.board.ladders:
            if self.position == inner_tuple[1]:
                self.position -= self.dropped_steps
        super().move()


class Simulation:
    def __init__(self,
                 player_field=[Player(), Player()],
                 board=Board(),
                 seed=2,
                 randomize_players=True):

        self.list_player = player_field
        self.board = board
        self.seed = seed
        self.randomize_players = randomize_players
        self.variable = None

    def single_game(self):
        """

        Returns
        -------
        a tuple consisting of the number of moves and the type of the winner

        """
        return 25, 'Player'

    def run_simulation(self, num_games):
        """
        Runs a given number of games

        Parameters
        ----------
        num_games:
            number of games to play

        """
        pass

    def get_results(self):
        """
        Returns all result generated by run_simulation() calls so far so far
        a list of result tuples.

        """
        if self.variable is None:
            self.variable = 0
            return (10, 'Player'), (6, 'Player')
        else:
            return (10, 'Player'), (6, 'Player'), (10, 'Player')

    def winners_per_type(self):
        """
        Returns a dictionary mapping player types to the number of wins.
        """
        ex_dict = {'Player': 4, 'LazyPlayer': 2, 'ResilientPlayer': 5}
        return ex_dict

    def durations_per_type(self):
        """
        Returns a dictionary mapping player types to lists of game durations
        for that type

        """
        ex_dict = {'Player': [11, 25, 13], 'LazyPlayer': [39],
                   'ResilientPlayer': [8, 7, 6, 11]}
        return ex_dict

    def players_per_type(self):
        """
        Returns a dictionary showing how many players of each type participate.
        """
        ex_dict = {'Player': 3, 'LazyPlayer': 1, 'ResilientPlayer': 0}
        return ex_dict
