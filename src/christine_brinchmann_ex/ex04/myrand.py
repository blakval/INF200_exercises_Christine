# -*- coding: utf-8 -*-

__author__ = "Christine Brinchmann"
__email__ = "christibr@nmbu.no"


class LCGRand:
    def __init__(self, seed):
        """
        Parameters
        ----------
        seed: a number given to generate the first random number
        """
        self.r = seed

    def rand(self):
        """
        Returns a number generated by a linear congruential generator based on
        the previous generated number (uses the seed the first time).
        """
        a = 7**5
        m = 2**31-1
        self.r = (a * self.r) % m
        return self.r


class ListRand:
    def __init__(self, num_list):
        """
        Parameters
        ----------
        num_list: a list of numbers

        Defines the index n as -1
        """
        self.num_list = num_list
        self.n = -1

    def rand(self):
        """
        Returns the n-th element in num_list and raises a RuntimeError if the
        list index is out of range.
        """
        self.n += 1
        if self.n < len(self.num_list):
            return self.num_list[self.n]
        else:
            raise RuntimeError('No more elements in list')


if __name__ == '__main__':
    test_LCGRand = LCGRand(35)
    data = [45, 932, 157, 295]
    test_ListRand = ListRand(data)
    print('Random numbers generated from the two classes:')
    for i in range(len(data)):
        LCG = test_LCGRand.rand()
        LR = test_ListRand.rand()
        print('LCGRand: {0:10d} --- ListRand: {1:3d}'.format(LCG, LR))

    try:
        test_ListRand.rand()
    except RuntimeError:
        print('The ListRand class raises a RuntimeError '
              'when the list index is out of range.')
